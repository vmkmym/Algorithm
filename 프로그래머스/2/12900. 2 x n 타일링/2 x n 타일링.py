def solution(n):
    dp = [0] * (n+1) # 길이가 n이고 모든 원소가 0인 리스트 생성
    dp[1], dp[2] = 1, 2 if n > 1 else 1
    for i in range(3, n+1): # 3부터 n까지의 직사각형을 채우는 방법의 수를 구함
        dp[i] = (dp[i-1] + dp[i-2]) % 1000000007 
    return dp[n]

# 의사코드
# 1. n이 1일 때는 1을 반환, n이 2일 때는 2를 반환
# 2. n이 3 이상일 때를 순회
    # i번째의 수는 i-1번째의 수와 i-2번째의 수를 더한 값
    # 더한 값을 1000000007로 나눈 나머지를 저장 (경우의 수가 많아질 수 있으므로)
# 6. n번째의 값을 반환

# 동적 프로그래밍을 생각할 수 있는 부분
# n번째 직사각형을 채우는 방법의 수를 구하려면 n-1번째와 n-2번째의 직사각형을 채우는 방법의 수를 알아야 함
    # n-1번째 방법의 수를 모르는데 n번째 방법의 수를 구할 수 없음 