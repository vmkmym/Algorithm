def solution(n, times):
    low = 1
    high = max(times) * n  # 최악의 경우, 가장 오래 걸리는 심사관에게 모두 심사받는 경우를 상정
    result = high
    while low <= high:
        mid = (low + high) // 2
        total = sum(mid // time for time in times)  # mid 시간 동안 심사할 수 있는 사람의 수
        if total < n:  # 심사받지 못한 사람이 있다면
            low = mid + 1 # 시간을 늘려서 더 많은 사람을 심사받게 함
        else:  # 모든 사람이 심사받았다면
            high = mid - 1 # 시간을 줄여서 더 적은 사람을 심사받게 함
            result = min(result, mid)  # 최소 시간을 갱신
    return result

'''
이진 탐색(Binary Search)은 정렬된 데이터 세트에서 특정 항목을 찾는 데 사용되는 알고리즘입니다. 이진 탐색은 데이터 세트의 중간 요소를 선택하고, 찾으려는 값과 비교하여 찾으려는 값이 중간 요소보다 작으면 왼쪽 하위 배열에서, 크면 오른쪽 하위 배열에서 탐색을 계속합니다. 이 과정을 반복하여 찾으려는 값을 찾습니다.

위의 코드에서는 이진 탐색을 사용하여 입국 심사를 기다리는 사람들이 모두 심사를 받는 데 걸리는 최소 시간을 찾습니다. 이를 위해, 심사를 받는 데 가장 오래 걸리는 시간(max(times) * n)을 최대 시간으로 설정하고, 1분을 최소 시간으로 설정합니다.

그런 다음, 최소 시간과 최대 시간의 중간값을 계산하고, 이 시간 동안 각 심사관이 심사할 수 있는 사람의 수를 계산합니다(total = sum(mid // time for time in times)). 이 값이 n보다 작으면, 중간값을 증가시켜 더 많은 사람이 심사받을 수 있도록 합니다. 그렇지 않으면, 중간값을 감소시켜 불필요한 시간을 줄입니다.

이 과정을 최소 시간이 최대 시간보다 커질 때까지 반복하며, 최소 시간을 찾습니다. 이렇게 하면, 모든 사람이 심사를 받는 데 걸리는 최소 시간을 효율적으로 찾을 수 있습니다.
'''