n, m = map(int, input().split())
try:
    weights = list(map(int, input().split()))
    box = 1
    total_weight = 0

    for weight in weights:
        if weight > m:
            print(0)
        if total_weight + weight > m:
            box += 1
            total_weight = weight
        else:
            total_weight += weight
            
    if n == 0:
        print(0)
    else:
        print(box)
except:
    print(0)

'''
그리디 알고리즘(탐욕법)은 각 단계에서 가장 최적인 선택을 하는 방식으로 문제를 해결하는 알고리즘입니다. 
그리디 알고리즘은 주어진 문제에 대해 현재 상황에서 가장 좋은 선택을 하는 것을 반복하여 최종적인 해답을 찾아냅니다. 
이때 각 선택은 지역적으로는 최적이지만, 전역적으로 항상 최적인 해답을 보장하지는 않을 수 있습니다.

그리디 알고리즘은 다음과 같은 과정을 따릅니다:
- 문제 정의: 주어진 문제를 정의하고 문제의 조건, 목표를 이해합니다.
- 선택 방법: 각 단계에서 어떤 선택을 할 것인지 결정합니다. 이때 선택은 현재 상태에서 가장 좋은 선택을 하는 것입니다.
- 선택 유효성 검사: 선택한 해를 검사하여 문제의 조건을 만족하는지 확인합니다.
- 해 검사: 문제의 해를 검사하여 최종 해답을 찾았는지 확인합니다.
- 반복: 선택, 선택 유효성 검사, 해 검사의 과정을 반복하여 최종 해답을 찾습니다.

그리디 알고리즘은 매 단계마다 가장 최적인 선택을 하는 특성 때문에 일반적으로 구현이 간단하고 실행 속도가 빠릅니다. 

그리디 알고리즘의 예시로는 거스름돈 문제가 있습니다. 
거스름돈 문제에서는 가장 큰 단위의 동전부터 차례로 거스름돈을 주는 방법을 선택합니다. 
이렇게 하면 가장 적은 동전의 개수로 거스름돈을 줄 수 있습니다.

하지만 그리디 알고리즘은 항상 최적해를 보장하지 않는 경우도 있습니다. 
예를 들어, 최소 신장 트리를 찾는 문제에서는 크루스칼 알고리즘과 프림 알고리즘 등 다른 알고리즘을 사용해야 합니다.
'''
